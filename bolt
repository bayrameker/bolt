#!/usr/bin/env php
<?php

require __DIR__ . '/vendor/autoload.php';

use Core\Database;
use Dotenv\Dotenv;
use Core\ViewRenderer;
use Core\Migration;

$dotenv = Dotenv::createImmutable(__DIR__);
$dotenv->load();

$command = $argv[1] ?? null;

switch ($command) {
    case 'migrate':
        migrate();
        break;
    case 'create:migration':
        $name = $argv[2] ?? null;
        createMigration($name);
        break;
    case 'seed':
        seed();
        break;
    case 'controller':
        $name = $argv[2] ?? null;
        $viewRouteFlag = $argv[3] ?? null;
        createController($name, $viewRouteFlag);
        break;
    case 'model':
        $name = $argv[2] ?? null;
        createModel($name);
        break;
    case 'service':
        $name = $argv[2] ?? null;
        createService($name);
        break;
    case 'repository':
        $name = $argv[2] ?? null;
        createRepository($name);
        break;
    case 'tailwind:init':
        initTailwind();
        break;
    case 'dump-autoload':
        dumpAutoload();
        break;
    case 'serve':
        serve();
        break;
    default:
        echo "Invalid command.\n";
        break;
}

function migrate()
{
    try {
        Database::connect();
        echo "Database connection successful.\n";
    } catch (PDOException $e) {
        echo "Database connection failed: " . $e->getMessage() . "\n";
        exit(1);
    }

    foreach (glob(__DIR__ . '/database/migrations/*.php') as $migrationFile) {
        require_once $migrationFile;
        $class = basename($migrationFile, '.php');
        $className = preg_replace('/^[0-9_]+/', '', $class);
        $className = str_replace('_', '', ucwords($className, '_'));

        if (class_exists($className)) {
            $migration = new $className();
            $migration->up();
            echo "Migrated: " . $className . "\n";
        } else {
            echo "Class does not exist: " . $className . "\n";
        }
    }
}

function createMigration($name)
{
    if ($name) {
        $timestamp = date('Y_m_d_His');
        $className = 'Create' . ucfirst($name) . 'Table';
        $fileName = "{$timestamp}_create_{$name}_table.php";
        $migrationTemplate = <<<EOT
<?php

use Core\Migration;

class {$className}
{
    public function up()
    {
        \$migration = new Migration();
        \$migration->createTable('{$name}', function (\$table) {
            \$table->id();
            \$table->string('name');
            \$table->timestamps();
        });
    }
}
EOT;
        file_put_contents(__DIR__ . "/database/migrations/{$fileName}", $migrationTemplate);
        echo "Migration created successfully: {$fileName}\n";
    } else {
        echo "Migration name is required.\n";
    }
}

function seed()
{
    try {
        Database::connect();
        echo "Database connection successful.\n";
    } catch (PDOException $e) {
        echo "Database connection failed: " . $e->getMessage() . "\n";
        exit(1);
    }

    foreach (glob(__DIR__ . '/database/seeds/*.php') as $seedFile) {
        require_once $seedFile;
        $class = basename($seedFile, '.php');
        if (class_exists($class)) {
            $seeder = new $class();
            $seeder->run();
            echo "Seeded: " . $class . "\n";
        }
    }
}

function createController($name, $viewRouteFlag)
{
    $lname = strtolower($name);
    if ($name) {
        $controllerTemplate = <<<EOT
<?php

namespace App\Controllers;

use Core\Controller;
use Core\Request;
use Core\Response;
use Core\ViewRenderer;

class {$name}Controller extends Controller
{
    public function index(Request \$request, Response \$response)
    {
        \$viewRenderer = new ViewRenderer('{$lname}/index', [
            'title' => '{$name} Page',
            'message' => 'Welcome to My Bolt Framework!',
            'layout' => 'layout'
        ]);
        \$viewRenderer->render();
    }
}
EOT;
        file_put_contents(__DIR__ . "/app/Controllers/{$name}Controller.php", $controllerTemplate);
        echo "{$name}Controller created successfully.\n";

        if ($viewRouteFlag == '-v') {
            // View dosyasını oluşturma
            $viewDir = __DIR__ . "/app/Views/{$lname}";
            if (!is_dir($viewDir)) {
                mkdir($viewDir, 0755, true);
            }

            $viewTemplate = <<<EOT

    <main>
        <h1><?= \$message ?? 'Welcome to My Bolt Framework!' ?></h1>
        <p>This is the {$name} view.</p>
    </main>
   
EOT;
            file_put_contents("{$viewDir}/index.php", $viewTemplate);
            echo "View for {$name}Controller created successfully.\n";

            // Route ekleme
            $routeTemplate = <<<EOT
\$router->get('/{$lname}', [App\Controllers\\{$name}Controller::class, 'index']);
EOT;
            file_put_contents(__DIR__ . "/routes/web.php", $routeTemplate . PHP_EOL, FILE_APPEND);
            echo "Route for {$name}Controller added to web.php successfully.\n";
        }
    } else {
        echo "Controller name is required.\n";
    }
}

function createModel($name)
{
    if ($name) {
        $modelTemplate = <<<EOT
<?php

namespace App\Models;

use Core\Model;

class {$name} extends Model
{
    protected \$fillable = [];
}
EOT;
        file_put_contents(__DIR__ . "/app/Models/{$name}.php", $modelTemplate);
        echo "{$name} model created successfully.\n";
    } else {
        echo "Model name is required.\n";
    }
}

function createService($name)
{
    if ($name) {
        $serviceTemplate = <<<EOT
<?php

namespace App\Services;

use App\Repositories\\{$name}Repository;

class {$name}Service
{
    protected \$repository;

    public function __construct({$name}Repository \$repository)
    {
        \$this->repository = \$repository;
    }

    public function getAll{$name}s()
    {
        return \$this->repository->findAll();
    }

    public function get{$name}ById(\$id)
    {
        return \$this->repository->find(\$id);
    }

    public function create{$name}(\$data)
    {
        return \$this->repository->create(\$data);
    }

    public function update{$name}(\$id, \$data)
    {
        return \$this->repository->update(\$id, \$data);
    }

    public function delete{$name}(\$id)
    {
        return \$this->repository->delete(\$id);
    }
}
EOT;
        file_put_contents(__DIR__ . "/app/Services/{$name}Service.php", $serviceTemplate);
        echo "{$name}Service created successfully.\n";
    } else {
        echo "Service name is required.\n";
    }
}

function createRepository($name)
{
    if ($name) {
        $repositoryTemplate = <<<EOT
<?php

namespace App\Repositories;

use Core\Repository;
use App\Models\\{$name};

class {$name}Repository extends Repository
{
    public function __construct()
    {
        parent::__construct(new {$name}());
    }
}
EOT;
        file_put_contents(__DIR__ . "/app/Repositories/{$name}Repository.php", $repositoryTemplate);
        echo "{$name}Repository created successfully.\n";
    } else {
        echo "Repository name is required.\n";
    }
}

function initTailwind()
{
    // Node.js ve npm gereklidir
    if (!shell_exec('which npm')) {
        echo "Node.js and npm are required. Please install them first.\n";
        exit(1);
    }

    // Tailwind CSS ve bağımlılıkları yükle
    echo "Installing Tailwind CSS and dependencies...\n";
    exec('npm install tailwindcss postcss-cli autoprefixer');

    // Tailwind CSS yapılandırma dosyasını oluştur
    echo "Creating Tailwind CSS configuration file...\n";
    exec('npx tailwindcss init');

    // tailwind.config.js dosyasını oluştur ve güncelle
    echo "Updating tailwind.config.js file...\n";
    $tailwindConfig = <<<EOT
module.exports = {
  content: [
    './app/Views/**/*.php',
    './app/Views/*.php',
    './public/**/*.html',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
EOT;
    file_put_contents(__DIR__ . '/tailwind.config.js', $tailwindConfig);

    // postcss.config.js dosyasını oluştur
    echo "Creating postcss.config.js file...\n";
    $postcssConfig = <<<EOT
module.exports = {
  plugins: [
    require('tailwindcss'),
    require('autoprefixer'),
  ],
}
EOT;
    file_put_contents(__DIR__ . '/postcss.config.js', $postcssConfig);

    // styles.css dosyasını oluştur
    echo "Creating src/styles.css file...\n";
    if (!is_dir(__DIR__ . '/src')) {
        mkdir(__DIR__ . '/src', 0755, true);
    }
    $stylesCss = <<<EOT
@tailwind base;
@tailwind components;
@tailwind utilities;
EOT;
    file_put_contents(__DIR__ . '/src/styles.css', $stylesCss);

    // package.json'a script ekle
    echo "Adding build script to package.json...\n";
    $packageJson = json_decode(file_get_contents(__DIR__ . '/package.json'), true);
    $packageJson['scripts']['build:css'] = 'npx postcss src/styles.css -o public/css/styles.css';
    file_put_contents(__DIR__ . '/package.json', json_encode($packageJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));

    // CSS'i derle
    echo "Building CSS...\n";
    exec('npm run build:css');

    echo "Tailwind CSS initialized successfully.\n";
}

function dumpAutoload()
{
    echo "Dumping autoload...\n";
    exec('composer dump-autoload');
    echo "Autoload dumped successfully.\n";
}

function serve()
{
    $port = getenv('APP_PORT') ?: 8080;
    $host = 'localhost';
    echo "Starting server on http://$host:$port\n";
    exec("php -S $host:$port -t public");
}
